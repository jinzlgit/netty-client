package com.jyd.netty.decoder;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;
import io.netty.channel.ChannelInitializer;
import io.netty.channel.embedded.EmbeddedChannel;
import io.netty.handler.codec.LengthFieldBasedFrameDecoder;
import io.netty.handler.codec.string.StringDecoder;
import io.netty.util.CharsetUtil;
import org.junit.Test;

public class TestDecoderTest {

    @Test
    public void decode() {
        EmbeddedChannel channel = new EmbeddedChannel(new ChannelInitializer<EmbeddedChannel>() {
            @Override
            protected void initChannel(EmbeddedChannel ec) throws Exception {
                ec.pipeline()
                        .addLast("内置自定义长度解码器", new LengthFieldBasedFrameDecoder(1024, 3,
                                2, 0, 5))
                        .addLast("内置字符串解码器", new StringDecoder(CharsetUtil.UTF_8))
                        .addLast("自定义解码器", new ByteToHexStringDecoder());
            }
        });

        ByteBuf buffer = Unpooled.buffer();
        String s
        char[] chars = s.toCharArray();
        for (char c : chars) {
            buffer.writeChar(c);
        }
        channel.writeInbound(buffer);
        try {
            Thread.sleep(Integer.MAX_VALUE);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        String s
        byte[] bytes = s.getBytes();
        for (byte b : bytes) {
            System.out.print(b);
        }
    }
}